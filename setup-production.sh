#!/bin/bash

# Script para configurar WepApp Control en producci√≥n (Hostinger)
# Autor: Sistema de Despliegue
# Fecha: $(date)

echo "üöÄ Configurando WepApp Control para producci√≥n..."
echo "================================================"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Cargar configuraci√≥n
if [ -f "hostinger-config.json" ]; then
    SSH_USER=$(grep -o '"user": "[^"]*"' hostinger-config.json | cut -d'"' -f4)
    SSH_HOST=$(grep -o '"host": "[^"]*"' hostinger-config.json | cut -d'"' -f4)
    SSH_PORT=$(grep -A2 '"ssh"' hostinger-config.json | grep '"port"' | cut -d' ' -f2 | tr -d ',')
    SSH_PATH=$(grep -o '"path": "[^"]*"' hostinger-config.json | cut -d'"' -f4)
    DOMAIN=$(grep -o '"domain": "[^"]*"' hostinger-config.json | cut -d'"' -f4)
    APP_PORT=$(grep -A2 '"nodejs"' hostinger-config.json | grep '"port"' | cut -d' ' -f2 | tr -d ',')
else
    echo -e "${RED}‚ùå Error: No se encontr√≥ hostinger-config.json${NC}"
    exit 1
fi

echo -e "${BLUE}üìã Configuraci√≥n detectada:${NC}"
echo "   - Usuario SSH: $SSH_USER"
echo "   - Host: $SSH_HOST"
echo "   - Puerto SSH: $SSH_PORT"
echo "   - Ruta: $SSH_PATH"
echo "   - Dominio: $DOMAIN"
echo "   - Puerto App: $APP_PORT"

# Funci√≥n para ejecutar comando SSH
run_ssh() {
    local command="$1"
    ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "$command"
}

# Funci√≥n para verificar conexi√≥n SSH
check_ssh_connection() {
    echo -e "${BLUE}üîç Verificando conexi√≥n SSH...${NC}"
    
    if run_ssh "echo 'Conexi√≥n SSH exitosa'" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Conexi√≥n SSH establecida${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Error conectando por SSH${NC}"
        return 1
    fi
}

# Funci√≥n para instalar PM2 en el servidor
install_pm2() {
    echo -e "${BLUE}üì¶ Instalando PM2 en el servidor...${NC}"
    
    # Verificar si PM2 ya est√° instalado
    if run_ssh "which pm2" >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  PM2 ya est√° instalado${NC}"
        return 0
    fi
    
    # Instalar PM2 globalmente
    if run_ssh "npm install -g pm2"; then
        echo -e "${GREEN}‚úÖ PM2 instalado correctamente${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Error instalando PM2${NC}"
        return 1
    fi
}

# Funci√≥n para configurar la aplicaci√≥n
setup_application() {
    echo -e "${BLUE}üîß Configurando aplicaci√≥n en el servidor...${NC}"
    
    # Crear directorio de logs si no existe
    run_ssh "mkdir -p $SSH_PATH/logs"
    
    # Crear directorio de uploads si no existe
    run_ssh "mkdir -p $SSH_PATH/uploads/comprobantes"
    
    # Verificar que la base de datos existe
    if ! run_ssh "test -f $SSH_PATH/database/wepapp_control.db"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Base de datos no encontrada. Configurando...${NC}"
        run_ssh "cd $SSH_PATH && node database/setup.js"
    fi
    
    echo -e "${GREEN}‚úÖ Aplicaci√≥n configurada${NC}"
}

# Funci√≥n para configurar PM2
setup_pm2() {
    echo -e "${BLUE}‚öôÔ∏è  Configurando PM2...${NC}"
    
    # Detener proceso existente si existe
    run_ssh "pm2 stop wepapp-control 2>/dev/null || true"
    run_ssh "pm2 delete wepapp-control 2>/dev/null || true"
    
    # Iniciar con PM2
    if run_ssh "cd $SSH_PATH && pm2 start ecosystem.config.js"; then
        echo -e "${GREEN}‚úÖ PM2 configurado correctamente${NC}"
        
        # Guardar configuraci√≥n de PM2
        run_ssh "pm2 save"
        
        # Configurar PM2 para iniciar autom√°ticamente
        run_ssh "pm2 startup"
        
        return 0
    else
        echo -e "${RED}‚ùå Error configurando PM2${NC}"
        return 1
    fi
}

# Funci√≥n para verificar el estado
check_status() {
    echo -e "${BLUE}üîç Verificando estado de la aplicaci√≥n...${NC}"
    
    # Verificar estado de PM2
    echo -e "${BLUE}üìä Estado de PM2:${NC}"
    run_ssh "pm2 status"
    
    # Verificar puertos
    echo -e "${BLUE}üîå Puertos en uso:${NC}"
    run_ssh "netstat -tuln | grep :$APP_PORT || echo 'Puerto $APP_PORT no est√° en uso'"
    
    # Verificar logs
    echo -e "${BLUE}üìù √öltimas l√≠neas de log:${NC}"
    run_ssh "tail -10 $SSH_PATH/logs/combined.log 2>/dev/null || echo 'No hay logs disponibles'"
}

# Funci√≥n para mostrar URLs de acceso
show_access_info() {
    echo ""
    echo -e "${GREEN}üéâ Configuraci√≥n completada${NC}"
    echo "================================================"
    echo -e "${BLUE}üîó URLs de acceso:${NC}"
    echo "   - Aplicaci√≥n: https://$DOMAIN"
    echo "   - API: https://$DOMAIN/api"
    echo ""
    echo -e "${BLUE}üìä Monitoreo:${NC}"
    echo "   - Estado PM2: ssh -p $SSH_PORT $SSH_USER@$SSH_HOST 'pm2 status'"
    echo "   - Logs: ssh -p $SSH_PORT $SSH_USER@$SSH_HOST 'pm2 logs wepapp-control'"
    echo ""
    echo -e "${BLUE}üõ†Ô∏è  Comandos √∫tiles:${NC}"
    echo "   - Reiniciar: ssh -p $SSH_PORT $SSH_USER@$SSH_HOST 'pm2 restart wepapp-control'"
    echo "   - Detener: ssh -p $SSH_PORT $SSH_USER@$SSH_HOST 'pm2 stop wepapp-control'"
    echo "   - Iniciar: ssh -p $SSH_PORT $SSH_USER@$SSH_HOST 'pm2 start wepapp-control'"
}

# Funci√≥n principal
main() {
    echo -e "${BLUE}üöÄ Iniciando configuraci√≥n de producci√≥n...${NC}"
    
    # Verificar conexi√≥n SSH
    if ! check_ssh_connection; then
        echo -e "${RED}‚ùå No se pudo establecer conexi√≥n SSH${NC}"
        echo -e "${YELLOW}üí° Verifica:${NC}"
        echo "   - Credenciales SSH correctas"
        echo "   - Puerto SSH: $SSH_PORT"
        echo "   - Host: $SSH_HOST"
        exit 1
    fi
    
    # Instalar PM2
    if ! install_pm2; then
        echo -e "${RED}‚ùå Error instalando PM2${NC}"
        exit 1
    fi
    
    # Configurar aplicaci√≥n
    setup_application
    
    # Configurar PM2
    if ! setup_pm2; then
        echo -e "${RED}‚ùå Error configurando PM2${NC}"
        exit 1
    fi
    
    # Verificar estado
    check_status
    
    # Mostrar informaci√≥n de acceso
    show_access_info
}

# Ejecutar funci√≥n principal
main 